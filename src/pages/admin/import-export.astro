---
import BaseHead from '../../components/BaseHead.astro';
import ThemeToggle from '../../components/ThemeToggle.astro';
import { SITE_TITLE } from '../../consts';

const pageTitle = "Import & Export";
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`${pageTitle} | ${SITE_TITLE}`} description="Import and export markdown documents" />
	</head>
	<body>
		<!-- Authentication check loading -->
		<div id="auth-loading" class="min-h-screen bg-secondary flex items-center justify-center">
			<div class="text-center">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4"></div>
				<p class="text-secondary">Checking login status...</p>
			</div>
		</div>

		<!-- Main interface -->
		<div id="admin-content" class="hidden min-h-screen bg-secondary">
			<!-- Top navigation -->
			<nav class="bg-primary shadow-sm border-b border-light">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-16">
						<div class="flex items-center space-x-4">
							<a href="/admin" class="text-secondary hover:text-accent">
								‚Üê Back to Dashboard
							</a>
							<h1 class="text-xl font-semibold text-primary">
								Import & Export
							</h1>
						</div>
						<div class="flex items-center space-x-4">
							<ThemeToggle />
							<a href="/" target="_blank" class="text-secondary hover:text-accent">
								View Site
							</a>
							<button id="logout-btn" class="text-secondary hover:text-danger">
								Logout
							</button>
						</div>
					</div>
				</div>
			</nav>

			<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
				<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
					<!-- Export Section -->
					<div class="bg-primary shadow-sm rounded-lg p-6">
						<div class="flex items-center mb-6">
							<svg class="h-6 w-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
							</svg>
							<h2 class="text-xl font-semibold text-primary">Export Content</h2>
						</div>
						
						<form id="export-form" class="space-y-4">
							<!-- Export Type -->
							<div>
								<label class="block text-sm font-medium text-secondary mb-2">Content Type</label>
								<select name="type" class="w-full px-3 py-2 border border-light rounded-md focus:outline-none focus:ring-2 focus:ring-accent">
									<option value="">All Content</option>
									<option value="article">Articles Only</option>
									<option value="note">Notes Only</option>
								</select>
							</div>

							<!-- Export Status -->
							<div>
								<label class="block text-sm font-medium text-secondary mb-2">Status</label>
								<select name="status" class="w-full px-3 py-2 border border-light rounded-md focus:outline-none focus:ring-2 focus:ring-accent">
									<option value="">All Status</option>
									<option value="published">Published Only</option>
									<option value="draft">Drafts Only</option>
								</select>
							</div>

							<!-- Export Format -->
							<div>
								<label class="block text-sm font-medium text-secondary mb-2">Export Format</label>
								<select name="format" class="w-full px-3 py-2 border border-light rounded-md focus:outline-none focus:ring-2 focus:ring-accent">
									<option value="zip">ZIP Archive (Recommended)</option>
									<option value="json">JSON Backup</option>
								</select>
							</div>

							<button type="submit" class="w-full bg-accent text-white py-2 px-4 rounded-md hover:bg-accent-hover transition-colors font-medium">
								Export Content
							</button>
						</form>

						<div id="export-status" class="mt-4 hidden">
							<div class="bg-blue-50 border border-blue-200 rounded-md p-4">
								<div class="flex items-center">
									<div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
									<span class="text-blue-800">Preparing export...</span>
								</div>
							</div>
						</div>
					</div>

					<!-- Import Section -->
					<div class="bg-primary shadow-sm rounded-lg p-6">
						<div class="flex items-center mb-6">
							<svg class="h-6 w-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
							</svg>
							<h2 class="text-xl font-semibold text-primary">Import Content</h2>
						</div>

						<div class="space-y-4">
							<!-- File Upload -->
							<div>
								<label class="block text-sm font-medium text-secondary mb-2">Upload File</label>
								<div class="border-2 border-dashed border-light rounded-lg p-6 text-center hover:border-medium transition-colors">
									<input type="file" id="import-file" accept=".zip,.md" class="hidden" />
									<div id="upload-area" class="cursor-pointer">
										<svg class="mx-auto h-12 w-12 text-slate-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
											<path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
										</svg>
										<p class="mt-2 text-sm text-secondary">
											<span class="font-medium text-accent hover:text-accent-hover">Click to upload</span>
											or drag and drop
										</p>
										<p class="text-xs text-muted">ZIP files or single Markdown files</p>
									</div>
									<div id="file-info" class="hidden mt-4 p-4 bg-secondary rounded-md">
										<div class="flex items-center justify-between">
											<div class="flex items-center">
												<svg class="h-5 w-5 text-slate-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm0 2h12v8H4V6z" clip-rule="evenodd" />
												</svg>
												<span id="file-name" class="text-sm text-primary"></span>
											</div>
											<button type="button" id="clear-file" class="text-red-600 hover:text-red-700">
												<svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
												</svg>
											</button>
										</div>
									</div>
								</div>
							</div>

							<!-- Import Options -->
							<div id="import-options" class="hidden space-y-4">
								<div>
									<label class="flex items-center">
										<input type="checkbox" id="preview-mode" checked class="rounded border-slate-300 text-blue-600 focus:ring-blue-500" />
										<span class="ml-2 text-sm text-secondary">Preview before importing</span>
									</label>
								</div>
								<div>
									<label class="flex items-center">
										<input type="checkbox" id="overwrite-existing" class="rounded border-slate-300 text-blue-600 focus:ring-blue-500" />
										<span class="ml-2 text-sm text-secondary">Overwrite existing posts with same slug</span>
									</label>
								</div>
								<div>
									<label class="flex items-center">
										<input type="checkbox" id="create-missing-tags" checked class="rounded border-slate-300 text-blue-600 focus:ring-blue-500" />
										<span class="ml-2 text-sm text-secondary">Create missing tags automatically</span>
									</label>
								</div>
							</div>

							<button type="button" id="import-btn" class="w-full bg-success text-white py-2 px-4 rounded-md hover:bg-success-hover transition-colors font-medium disabled:bg-muted disabled:cursor-not-allowed" disabled>
								Start Import
							</button>
						</div>

						<div id="import-status" class="mt-4 hidden">
							<div class="bg-green-50 border border-green-200 rounded-md p-4">
								<div class="flex items-center">
									<div class="animate-spin rounded-full h-5 w-5 border-b-2 border-green-600 mr-3"></div>
									<span class="text-green-800">Processing import...</span>
								</div>
							</div>
						</div>
					</div>
				</div>

				<!-- Preview Section -->
				<div id="import-preview" class="hidden mt-8 bg-primary shadow-sm rounded-lg p-6">
					<h3 class="text-lg font-semibold text-primary mb-4">Import Preview</h3>
					<div id="preview-content" class="space-y-4">
						<!-- Preview content will be populated here -->
					</div>
					<div class="flex justify-end space-x-4 mt-6">
						<button type="button" id="cancel-import" class="px-4 py-2 border border-light rounded-md text-secondary hover:bg-secondary">
							Cancel
						</button>
						<button type="button" id="confirm-import" class="px-4 py-2 bg-success text-white rounded-md hover:bg-success-hover">
							Confirm Import
						</button>
					</div>
				</div>

				<!-- Results Section -->
				<div id="import-results" class="hidden mt-8 bg-primary shadow-sm rounded-lg p-6">
					<h3 class="text-lg font-semibold text-primary mb-4">Import Results</h3>
					<div id="results-content">
						<!-- Results will be populated here -->
					</div>
				</div>
			</div>
		</div>

		<script>
			document.addEventListener('DOMContentLoaded', async () => {
				const authLoading = document.getElementById('auth-loading');
				const adminContent = document.getElementById('admin-content');
				const logoutBtn = document.getElementById('logout-btn');

				// Check authentication status
				const token = localStorage.getItem('admin_token');
				const expires = localStorage.getItem('admin_token_expires');

				if (!token || !expires || new Date(expires) < new Date()) {
					localStorage.removeItem('admin_token');
					localStorage.removeItem('admin_token_expires');
					window.location.href = '/admin/login';
					return;
				}

				authLoading?.classList.add('hidden');
				adminContent?.classList.remove('hidden');

				// Logout functionality
				logoutBtn?.addEventListener('click', () => {
					localStorage.removeItem('admin_token');
					localStorage.removeItem('admin_token_expires');
					window.location.href = '/admin/login';
				});

				// Export functionality
				const exportForm = document.getElementById('export-form') as HTMLFormElement;
				const exportStatus = document.getElementById('export-status');

				exportForm?.addEventListener('submit', async (e) => {
					e.preventDefault();
					const formData = new FormData(e.target as HTMLFormElement);
					const params = Object.fromEntries(formData);

					exportStatus?.classList.remove('hidden');

					try {
						const response = await fetch('/api/export/bulk', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
								'Authorization': `Bearer ${token}`
							},
							body: JSON.stringify(params)
						});

						if (response.ok) {
							const blob = await response.blob();
							const url = window.URL.createObjectURL(blob);
							const a = document.createElement('a');
							a.href = url;
							a.download = response.headers.get('Content-Disposition')?.match(/filename="(.+)"/)?.[1] || 'export.zip';
							document.body.appendChild(a);
							a.click();
							window.URL.revokeObjectURL(url);
							document.body.removeChild(a);
						} else {
							const errorData = await response.json().catch(() => ({ error: 'Export failed' })) as { error?: string };
							throw new Error(errorData.error || `Export failed with status ${response.status}`);
						}
					} catch (error) {
						console.error('Export error:', error);
						alert(`Export failed: ${(error as Error).message}. Please try again.`);
					} finally {
						exportStatus?.classList.add('hidden');
					}
				});

				// File upload functionality
				const fileInput = document.getElementById('import-file') as HTMLInputElement;
				const uploadArea = document.getElementById('upload-area');
				const fileInfo = document.getElementById('file-info');
				const fileName = document.getElementById('file-name');
				const clearFileBtn = document.getElementById('clear-file');
				const importOptions = document.getElementById('import-options');
				const importBtn = document.getElementById('import-btn');

				let selectedFile: File | null = null;

				uploadArea?.addEventListener('click', () => fileInput?.click());

				uploadArea?.addEventListener('dragover', (e) => {
					e.preventDefault();
					uploadArea.classList.add('border-blue-400', 'bg-blue-50');
				});

				uploadArea?.addEventListener('dragleave', (e) => {
					e.preventDefault();
					uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
				});

				uploadArea?.addEventListener('drop', (e) => {
					e.preventDefault();
					uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
					const files = e.dataTransfer?.files;
					if (files?.length) {
						handleFileSelect(files[0]);
					}
				});

				fileInput?.addEventListener('change', (e) => {
					const target = e.target as HTMLInputElement;
					const files = target.files;
					if (files?.length) {
						handleFileSelect(files[0]);
					}
				});

				clearFileBtn?.addEventListener('click', () => {
					selectedFile = null;
					if (fileInput) fileInput.value = '';
					fileInfo?.classList.add('hidden');
					importOptions?.classList.add('hidden');
					importBtn?.setAttribute('disabled', '');
				});

				function handleFileSelect(file: File) {
					selectedFile = file;
					if (fileName) fileName.textContent = file.name;
					fileInfo?.classList.remove('hidden');
					importOptions?.classList.remove('hidden');
					importBtn?.removeAttribute('disabled');
				}

				// Import functionality
				const importStatus = document.getElementById('import-status');
				const importPreview = document.getElementById('import-preview');
				const previewContent = document.getElementById('preview-content');
				const cancelImportBtn = document.getElementById('cancel-import');
				const confirmImportBtn = document.getElementById('confirm-import');
				const importResults = document.getElementById('import-results');
				const resultsContent = document.getElementById('results-content');

				let previewData: any = null;

				importBtn?.addEventListener('click', async () => {
					if (!selectedFile) return;

					const previewMode = (document.getElementById('preview-mode') as HTMLInputElement)?.checked;
					
					if (previewMode) {
						await showImportPreview();
					} else {
						await performImport();
					}
				});

				async function showImportPreview() {
					importStatus?.classList.remove('hidden');
					importPreview?.classList.add('hidden');

					try {
						const formData = new FormData();
						formData.append('file', selectedFile!);

						const response = await fetch('/api/import/preview', {
							method: 'POST',
							headers: {
								'Authorization': `Bearer ${token}`
							},
							body: formData
						});

						const result = await response.json() as { success: boolean; data?: any; error?: string };

						if (result.success) {
							previewData = result.data;
							displayPreview(result.data);
							importPreview?.classList.remove('hidden');
						} else {
							throw new Error(result.error || 'Preview failed');
						}
					} catch (error) {
						console.error('Preview error:', error);
						alert('Failed to preview import. Please check your file.');
					} finally {
						importStatus?.classList.add('hidden');
					}
				}

				function displayPreview(data: any) {
					if (!previewContent) return;
					
					previewContent.innerHTML = `
						<div class="bg-blue-50 border border-blue-200 rounded-md p-4 mb-4">
							<h4 class="font-medium text-blue-900">Import Summary</h4>
							<p class="text-blue-800 text-sm mt-1">
								Found ${data.totalFiles} files, ${data.validPosts} valid posts
							</p>
						</div>
						
						${data.conflicts?.length > 0 ? `
							<div class="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
								<h4 class="font-medium text-red-900">Conflicts Detected</h4>
								<ul class="text-red-800 text-sm mt-1 space-y-1">
									${data.conflicts.map((conflict: string) => `<li>‚Ä¢ ${conflict}</li>`).join('')}
								</ul>
							</div>
						` : ''}
						
						<div class="space-y-3">
							${data.posts.slice(0, 5).map((post: any) => `
								<div class="border border-slate-200 rounded-md p-3">
									<h5 class="font-medium text-slate-900">${post.title || '(No title)'}</h5>
									<p class="text-sm text-slate-600">${post.type} ‚Ä¢ ${post.tags?.join(', ') || 'No tags'}</p>
									<p class="text-xs text-slate-500">${post.slug}</p>
								</div>
							`).join('')}
							${data.posts.length > 5 ? `<p class="text-sm text-slate-500">... and ${data.posts.length - 5} more</p>` : ''}
						</div>
					`;
				}

				async function performImport() {
					importStatus?.classList.remove('hidden');
					importResults?.classList.add('hidden');

					try {
						const formData = new FormData();
						formData.append('file', selectedFile!);
						formData.append('overwriteExisting', (document.getElementById('overwrite-existing') as HTMLInputElement)?.checked.toString());
						formData.append('createMissingTags', (document.getElementById('create-missing-tags') as HTMLInputElement)?.checked.toString());

						const response = await fetch('/api/import/markdown', {
							method: 'POST',
							headers: {
								'Authorization': `Bearer ${token}`
							},
							body: formData
						});

						const result = await response.json() as { success: boolean; data?: any; error?: string };

						if (result.success) {
							displayResults(result.data);
							importResults?.classList.remove('hidden');
							// Reset form
							selectedFile = null;
							if (fileInput) fileInput.value = '';
							fileInfo?.classList.add('hidden');
							importOptions?.classList.add('hidden');
							importBtn?.setAttribute('disabled', '');
						} else {
							throw new Error(result.error || 'Import failed');
						}
					} catch (error) {
						console.error('Import error:', error);
						alert('Import failed. Please try again.');
					} finally {
						importStatus?.classList.add('hidden');
					}
				}

				function displayResults(data: any) {
					if (!resultsContent) return;
					
					resultsContent.innerHTML = `
						<div class="bg-green-50 border border-green-200 rounded-md p-4 mb-4">
							<h4 class="font-medium text-green-900">Import Completed Successfully</h4>
							<p class="text-green-800 text-sm mt-1">
								Imported ${data.imported} posts, created ${data.newTags} new tags
							</p>
						</div>
						
						${data.errors?.length > 0 ? `
							<div class="bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-4">
								<h4 class="font-medium text-yellow-900">Warnings</h4>
								<ul class="text-yellow-800 text-sm mt-1 space-y-1">
									${data.errors.map((error: string) => `<li>‚Ä¢ ${error}</li>`).join('')}
								</ul>
							</div>
						` : ''}
					`;
				}

				cancelImportBtn?.addEventListener('click', () => {
					previewData = null;
					importPreview?.classList.add('hidden');
				});

				confirmImportBtn?.addEventListener('click', async () => {
					if (previewData) {
						importPreview?.classList.add('hidden');
						await performImport();
					}
				});
			});
		</script>
	</body>
</html>