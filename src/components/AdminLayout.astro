---
import BaseHead from './BaseHead.astro';
import ThemeToggle from './ThemeToggle.astro';
import { SITE_TITLE } from '../consts';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Blog admin dashboard" } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`${title} | ${SITE_TITLE}`} description={description} />
	</head>
	<body class="bg-secondary min-h-screen">
		<!-- Authentication check loading -->
		<div id="auth-loading" class="min-h-screen bg-secondary flex items-center justify-center">
			<div class="text-center">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4"></div>
				<p class="text-secondary">Checking login status...</p>
			</div>
		</div>

		<!-- Main interface -->
		<div id="admin-content" class="hidden">
			<!-- Top navigation -->
			<nav class="bg-primary shadow-sm border-b border-light">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-16">
						<div class="flex items-center">
							<a href="/admin" class="text-xl font-semibold text-primary hover:text-accent">
								{SITE_TITLE} - Admin Dashboard
							</a>
						</div>
						<div class="flex items-center space-x-4">
							<ThemeToggle />
							<a href="/" target="_blank" class="text-secondary hover:text-accent">
								View Site
							</a>
							<button id="logout-btn" class="text-secondary hover:text-danger">
								Logout
							</button>
						</div>
					</div>
				</div>
			</nav>

			<!-- Breadcrumb navigation -->
			<div class="bg-primary border-b border-light">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="py-3">
						<nav class="flex" aria-label="Breadcrumb">
							<ol class="inline-flex items-center space-x-1 md:space-x-3">
								<li class="inline-flex items-center">
									<a href="/admin" class="text-muted hover:text-accent">
										Admin Dashboard
									</a>
								</li>
								<li>
									<div class="flex items-center">
										<svg class="w-6 h-6 text-muted" fill="currentColor" viewBox="0 0 20 20">
											<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
										</svg>
										<span class="ml-1 text-muted md:ml-2">
											{title}
										</span>
									</div>
								</li>
							</ol>
						</nav>
					</div>
				</div>
			</div>

			<!-- Main content -->
			<main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
				<slot />
			</main>
		</div>

		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const authLoading = document.getElementById('auth-loading');
				const adminContent = document.getElementById('admin-content');
				const logoutBtn = document.getElementById('logout-btn');

				// Check authentication status
				const token = localStorage.getItem('admin_token');
				const expires = localStorage.getItem('admin_token_expires');

				if (!token || !expires || new Date(expires) < new Date()) {
					// Not logged in or token expired, redirect to login page
					localStorage.removeItem('admin_token');
					localStorage.removeItem('admin_token_expires');
					window.location.href = '/admin/login';
					return;
				}

				// Show admin interface
				authLoading?.classList.add('hidden');
				adminContent?.classList.remove('hidden');

				// Logout
				logoutBtn?.addEventListener('click', () => {
					localStorage.removeItem('admin_token');
					localStorage.removeItem('admin_token_expires');
					window.location.href = '/admin/login';
				});
			});

			// Global authenticated request function
			window.authFetch = async function(url: string, options: RequestInit = {}) {
				const token = localStorage.getItem('admin_token');
				const expires = localStorage.getItem('admin_token_expires');
				
				// Check if token is expired
				if (!token || !expires || new Date(expires) < new Date()) {
					localStorage.removeItem('admin_token');
					localStorage.removeItem('admin_token_expires');
					window.location.href = '/admin/login';
					throw new Error('Authentication required');
				}
				
				const response = await fetch(url, {
					...options,
					headers: {
						...options.headers,
						'Authorization': `Bearer ${token}`,
						'Content-Type': 'application/json',
					},
				});
				
				// Check for 401 Unauthorized
				if (response.status === 401) {
					localStorage.removeItem('admin_token');
					localStorage.removeItem('admin_token_expires');
					window.location.href = '/admin/login';
					throw new Error('Authentication failed');
				}
				
				return response;
			};
		</script>
	</body>
</html>