---
import HeaderLink from './HeaderLink.astro';
import ThemeToggle from './ThemeToggle.astro';
import { SITE_TITLE } from '../consts';

interface Props {
	siteTitle?: string;
}

const { siteTitle = SITE_TITLE } = Astro.props;
---

<header class="bg-surface border-b border-surface sticky top-0 z-50">
	<nav class="container-responsive py-4">
		<div class="flex items-center justify-between">
			<!-- Logo -->
			<a href="/" class="text-2xl font-bold text-primary hover:text-accent transition-all duration-300 tracking-tight">
				{siteTitle}
			</a>

			<!-- Desktop Navigation -->
			<div class="hidden md:flex items-center space-x-2">
				<HeaderLink href="/">Home</HeaderLink>
				<HeaderLink href="/posts">Posts</HeaderLink>
				<HeaderLink href="/tags">Tags</HeaderLink>
				<ThemeToggle />
			</div>

			<!-- Mobile Menu Button and Theme Toggle -->
			<div class="md:hidden flex items-center space-x-2">
				<ThemeToggle />
				<button 
					id="mobile-menu-button"
					class="p-3 rounded-xl hover:bg-tertiary transition-all duration-300 touch-target"
					aria-label="Toggle menu"
				>
					<svg class="w-6 h-6 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h16" />
					</svg>
				</button>
			</div>
		</div>

		<!-- Mobile Navigation -->
		<div id="mobile-menu" class="md:hidden mt-6 space-y-1 hidden animate-slide-down">
			<HeaderLink href="/" class="block">Home</HeaderLink>
			<HeaderLink href="/posts" class="block">Posts</HeaderLink>
			<HeaderLink href="/tags" class="block">Tags</HeaderLink>
		</div>
	</nav>
</header>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const mobileMenuButton = document.getElementById('mobile-menu-button');
		const mobileMenu = document.getElementById('mobile-menu');
		
		if (mobileMenuButton && mobileMenu) {
			let isOpen = false;
			
			const toggleMenu = () => {
				isOpen = !isOpen;
				mobileMenu.classList.toggle('hidden', !isOpen);
				
				// Update button aria-expanded for accessibility
				mobileMenuButton.setAttribute('aria-expanded', isOpen.toString());
				
				// Add smooth animation
				if (isOpen) {
					mobileMenu.style.animation = 'slideDown 0.3s ease-out';
				} else {
					mobileMenu.style.animation = 'slideUp 0.3s ease-out';
				}
			};
			
			// Button click handler
			mobileMenuButton.addEventListener('click', toggleMenu);
			
			// Close menu when clicking outside
			document.addEventListener('click', (event) => {
				if (isOpen && !mobileMenuButton.contains(event.target) && !mobileMenu.contains(event.target)) {
					toggleMenu();
				}
			});
			
			// Close menu on escape key
			document.addEventListener('keydown', (event) => {
				if (isOpen && event.key === 'Escape') {
					toggleMenu();
				}
			});
			
			// Close menu on window resize (for responsive behavior)
			window.addEventListener('resize', () => {
				if (window.innerWidth >= 768 && isOpen) {
					toggleMenu();
				}
			});
		}
	});
</script>
